ZSH_THEME=minimal

# disable checking untracked git files to avoid freezing in large repositories
export DISABLE_UNTRACKED_FILES_DIRTY=true

if [[ -z $XDG_CONFIG_HOME ]]; then
   export XDG_CONFIG_HOME="$HOME/.config"
fi

[[ -r "$HOME/.zsh_aliases" ]] && source "$HOME/.zsh_aliases"
[[ -r "$HOME/.config/user-dirs.dirs" ]] && source "$HOME/.config/user-dirs.dirs"
[[ -r "$HOME/.zsh_sensitive" ]] && source "$HOME/.zsh_sensitive"
[[ -r "/etc/zsh/zprofile" ]] && source /etc/zsh/zprofile

[[ -s "$HOME/.gvm/scripts/gvm" ]] && source "$HOME/.gvm/scripts/gvm"
#export GOPATH=$HOME/go
#export GOBIN=$GOPATH/bin
#export PATH=${PATH}:$GOBIN:$GOROOT/bin

export KUBECONFIG="$HOME/.kube/config"

export PATH="$HOME/.local/bin:$PATH"
export PATH="$HOME/.local/opt/brew/bin:$PATH"
export PATH="$HOME/.local/opt/brew/sbin:$PATH"
export PATH="$HOME/.krew/bin:$PATH"
export PATH="/var/lib/rancher/rke2/bin:$PATH"
export PATH="/home/padlyuck/.ebcli-virtual-env/executables:$PATH"

export COMPOSER_HOME="$XDG_CONFIG_HOME/composer"
export COMPOSER_CACHE_DIR="$HOME/.cache/composer"

export ARGOCD_OPTS='--grpc-web'

if command -v nano > /dev/null 2>&1; then
    export EDITOR=nano
    export OC_EDITOR=nano
    export KUBE_EDITOR=nano
    git config --global core.editor "nano -w"
fi

# Uncomment the following line to display red dots whilst waiting for completion.
COMPLETION_WAITING_DOTS="true"

HIST_STAMPS="yyyy-mm-dd"

plugins=($(cat "$HOME/.zsh_plugins"))

# https://github.com/popstas/zsh-command-time
# If command execution time above min. time, plugins will not output time.
ZSH_COMMAND_TIME_MIN_SECONDS=1
# Message to display (set to "" for disable).
ZSH_COMMAND_TIME_MSG="Execution time: %s sec"

ZSH_ALIAS_FINDER_AUTOMATIC=true

#autosuggestion plugin configuration
ZSH_AUTOSUGGEST_ACCEPT_WIDGETS=(
    end-of-line
    vi-forward-char
    vi-end-of-line
    vi-add-eol
)
ZSH_AUTOSUGGEST_PARTIAL_ACCEPT_WIDGETS=(
    forward-char
    forward-word
    emacs-forward-word
    vi-forward-word
    vi-forward-word-end
    vi-forward-blank-word
    vi-forward-blank-word-end
    vi-find-next-char
    vi-find-next-char-skip
)

setopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_SPACE
setopt HIST_EXPIRE_DUPS_FIRST
setopt HIST_FIND_NO_DUPS
setopt HIST_NO_FUNCTIONS
setopt EXTENDED_HISTORY
setopt INC_APPEND_HISTORY

# this lines should go at the bottom of the file
source $ZSH/oh-my-zsh.sh

if command -v kustomize > /dev/null 2>&1; then
    kustomize completion zsh >| "$ZSH_CACHE_DIR/completions/_kustomize"
    source "$ZSH_CACHE_DIR/completions/_kustomize"
fi

if command -v cobra-cli > /dev/null 2>&1; then
  cobra-cli completion zsh >| "$ZSH_CACHE_DIR/completions/_cobra-cli"
  source "$ZSH_CACHE_DIR/completions/_cobra-cli"
  compdef _cobra-cli cobra  
fi

if command -v helm > /dev/null 2>&1; then
    helm completion zsh >| "$ZSH_CACHE_DIR/completions/_helm"
    source "$ZSH_CACHE_DIR/completions/_helm"
fi

if command -v vault > /dev/null 2>&1; then
    complete -C /usr/bin/vault vault
fi

if command -v eksctl > /dev/null 2>&1; then
    eksctl completion zsh >| "$ZSH_CACHE_DIR/completions/_eksctl"
    source "$ZSH_CACHE_DIR/completions/_eksctl"
    compdef _eksctl eksctl
fi

if command -v tmux > /dev/null 2>&1; then
    ssh() {
        if [[ -v TMUX ]]; then
          tmux new-window -n "$*" /usr/bin/ssh "$@"
        else
          /usr/bin/ssh "$@"
        fi
    }
fi

#PROMPT='$(kube_ps1) '"$PROMPT"
PROMPT='$(kube_ps1) %2~ Â»%b '
bindkey -r '^[^['
bindkey '^]' forward-word
bindkey '^[' backward-word
bindkey -s '^[^K' '^Q kubectl-ctx^M' # CTRL+ALT+K kubectl-ctx
bindkey -s '^[^N' '^Q kubectl-ns^M'  # CTRL+ALT+N kubectl-ns
KUBE_PS1_SYMBOL_ENABLE=false
KUBE_PS1_SYMBOL_DEFAULT=""

zstyle ':autocomplete:*' default-context history-incremental-search-backward
